# 📄 Product Requirements Document  
**Product Name**: SwiftUI E-Commerce App with In-App Purchases  
**Platform**: iOS (iPhone + iPad)  
**Technology Stack**: Swift, SwiftUI, StoreKit, Alamofire or URLSession, MVVM architecture

---

## 1. 🎯 Objective  
Develop a SwiftUI-based iOS E-commerce app that:
- Displays a product catalog from a public API  
- Implements in-app purchases using StoreKit or StoreKit 2
- Provides clean architecture, responsive UI, and dynamic content updates  

---

## 2. 🧩 Core Features

### 2.1 📦 Product Listing Screen
- Fetches data from public API (e.g. https://fakeapi.platzi.com/en/rest/products/)
- Displays each product with:
  - `Product Name`
  - `Price`
  - `Ratings` (e.g., 4.3, star)
  - `Rating Count` (e.g., 120)
  - `Image`
- Tappable product cards navigate to Product Details screen
- use pagination to display list with nice and smooth animation while fetching data using pagination

### 2.2 📄 Product Details Page
- Displays:
  - Product Name
  - Description
  - Price
  - Ratings
  - Rating Count
  - Images (horizontal scrollable with nice and smooth animation)
- Includes a `Buy` button (if not purchased)
- Includes purchased ui instead of `Buy` button (if purchased)
- After purchase:
  - Shows confirmation message
  - Unlocks detailed content
  - Tracks purchase using `UserDefaults`

### 2.3 🛒 In-App Purchase Integration
- Uses **StoreKit 2**
- Implements:
  - Product registration
  - Purchase initiation
  - Transaction status tracking
- Handles:
  - Success/failure flows
  - Purchase restoration
  - Edge cases: cancellations, connection failures

---

## 3. 🧠 Technical Requirements

- Use **MVVM** architecture with proper layer separation
- Code must be:
  - Clean, modular, well-commented
  - SwiftUI best practices compliant
- Use:
  - `@MainActor`, `@Published`, Combine
  - `async/await` with `URLSession` or `Alamofire`
- Handle all edge cases (network errors, purchase failures, missing images, etc.)
- Keep StoreKit logic isolated in its own service layer

---

## 4. 🎨 UI/UX Requirements

- Fully **responsive**, **adaptive** layout
- Support **Dark Mode**
- Use **majestic UI/UX**:
  - Fluid transitions
  - Bounce & fade effects
  - Smooth loading animations
- UX must feel native and intuitive
- Components:
  - ProductCardView
  - RatingView
  - LoadingView
  - PurchaseButtonView

---

## 5. ⚠️ Error Handling

- Network failure:
  - Show retry option
  - Offline fallback (optional)
- API failure:
  - Show graceful fallback UI with "No products available"
- StoreKit errors:
  - Handle user cancel, invalid ID, and interrupted transactions
- Show alerts/snackbars for all error states

---

## 6. 🌟 Bonus Features (Optional)

- add beautiful splash screen
- Loading indicators while fetching/purchasing
- Use SwiftUI **Previews** for UI testing
- Add **Lottie animations** or **confetti effects** on purchase
- Persist scroll state or last-viewed product
- Add pull-to-refresh

---

## 7. 📁 Suggested Folder & File Structure (SwiftUI + MVVM)

```
📦 ECommerceApp
├── 📁 Core
│   ├── NetworkService.swift
│   ├── APIError.swift
│   └── PurchaseManager.swift
│
├── 📁 Models
│   ├── Product.swift
│   └── PurchaseStatus.swift
│
├── 📁 ViewModels
│   ├── ProductListViewModel.swift
│   └── ProductDetailViewModel.swift
│
├── 📁 Views
│   ├── 📁 Components
│   │   ├── ProductCardView.swift
│   │   ├── RatingView.swift
│   │   ├── LoadingView.swift
│   │   └── PurchaseButtonView.swift
│   ├── ProductListView.swift
│   └── ProductDetailView.swift
│
├── 📁 Resources
│   ├── Assets.xcassets
│   └── Localizable.strings
│
├── 📁 Utils
│   ├── Extensions.swift
│   └── Constants.swift
│
├── 📄 ContentView.swift
├── 📄 ECommerceApp.swift
└── 📄 StoreKitConfig.storekit
```
